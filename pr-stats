#!/bin/sh

set -eu

if ! gh help > /dev/null; then
  echo "gh is required."
  echo "Please see: https://github.com/cli/cli"
  exit 1
fi

SINCE=""
UNTIL=""
REPO=""
LIMIT=500
VERBOSE=false

for i in "$@"; do
  case $i in
      --since=*)
      SINCE="${i#*=}"
      shift
      ;;
      --until=*)
      UNTIL="${i#*=}"
      shift
      ;;
      --repo=*)
      REPO="${i#*=}"
      shift
      ;;
      -v)
      VERBOSE=true
      shift
      ;;
  esac
done

if [ -z "$SINCE" ] || [ -z "$UNTIL" ] || [ -z "$REPO" ]; then
    echo "Usage: $0 --since=YYYY-MM-DD --until=YYYY-MM-DD --repo=orgName/repoName [-v]"
    exit 1
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    UNTIL_PLUS_ONE=$(date -j -v+1d -f "%Y-%m-%d" "$UNTIL" "+%Y-%m-%d")
else
    # Linux
    UNTIL_PLUS_ONE=$(date -I -d "$UNTIL + 1 day")
fi

# Get all PRs, filter out those with "リリース" or "release" in the title
# prs=$(gh pr list --repo "$REPO" --state closed --search "closed:>$SINCE closed:<$UNTIL_PLUS_ONE" --json number,title,author,url --limit $LIMIT | jq '[.[] | select(.title | test("リリース|release") | not)]')
prs=$(gh pr list --repo "$REPO" --state closed --search "closed:$SINCE..$UNTIL_PLUS_ONE" --json number,title,author,url --limit $LIMIT | jq '[.[] | select(.title | test("リリース|release") | not)]')

# Output format depends on verbose flag
if [ "$VERBOSE" = true ]; then
    echo "$prs" | jq '[group_by(.author.login)[] | {author: .[0].author.login, count: length, prs: [.[].url]}]'
else
    echo "$prs" | jq '[group_by(.author.login)[] | {author: .[0].author.login, count: length}]'
fi
