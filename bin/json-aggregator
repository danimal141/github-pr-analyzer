#!/bin/sh

set -eu

# Check for required commands: gh and jq
if ! gh help > /dev/null || ! jq --version > /dev/null; then
  echo "gh and jq are required."
  echo "Please see: https://github.com/cli/cli for gh"
  echo "and https://stedolan.github.io/jq/ for jq"
  exit 1
fi

# Initial parameter setup with default values
ITER_START=""
ITER_END=""
ITER_DURATION=7
COUNT=""
REPO=""
VERBOSE=false
AUTHORS=""

# Parse command line arguments
for i in "$@"; do
  case $i in
      --iter-start=*)
      ITER_START="${i#*=}"
      shift
      ;;
      --iter-end=*)
      ITER_END="${i#*=}"
      shift
      ;;
      --iter-duration=*)
      ITER_DURATION="${i#*=}"
      shift
      ;;
      --count=*)
      COUNT="${i#*=}"
      shift
      ;;
      --repo=*)
      REPO="${i#*=}"
      shift
      ;;
      --output=*)
      OUTPUT="${i#*=}"
      shift
      ;;
      --authors=*)
      AUTHORS="${i#*=}"
      shift
      ;;
      -v)
      VERBOSE=true
      shift
      ;;
  esac
done

# Check if all required parameters are provided
if [ -z "$ITER_START" ] || [ -z "$ITER_END" ] || [ -z "$ITER_DURATION" ] || [ -z "$COUNT" ] || [ -z "$REPO" ]; then
    echo "Usage: $0 --iter-start=YYYY-MM-DD --iter-end=YYYY-MM-DD --iter-duration=days --count=number --repo=orgName/repoName [--authors=author1,author2] [-v]"
    exit 1
fi

# Function to add or subtract days from a date
# Usage: date_modify "-1d" "2023-01-01"
date_modify() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        modified_date=$(date -v$1 -jf "%Y-%m-%d" "$2" "+%Y-%m-%d")
        echo $modified_date
    else
        # Linux
        modified_date=$(date -I -d "$2 $1")
        echo $modified_date
    fi
}

# Temporary directory for storing individual gpa outputs
temp_dir=$(mktemp -d)
trap 'rm -rf "$temp_dir"' EXIT

ROOT_DIR=$(cd $(dirname $0)/..; pwd)

# Main loop to execute the gpa script with calculated dates
for (( i=0; i<COUNT; i++ )); do
    # Calculate the number of days to modify
    days_to_modify=$(($ITER_DURATION * i))

    # Calculate the new iteration start and end dates
    new_start=$(date_modify "-${days_to_modify}d" "$ITER_START")
    new_end=$(date_modify "-${days_to_modify}d" "$ITER_END")

    # Temporary file for this iteration
    temp_file="$temp_dir/$new_start.json"

    # Execute the gpa script with the new dates and store the output
    if [ "$VERBOSE" = true ]; then
      $ROOT_DIR/bin/gpa -v --since="$new_start" --until="$new_end" --repo="$REPO" --authors="$AUTHORS" > "$temp_file"
    else
      $ROOT_DIR/bin/gpa --since="$new_start" --until="$new_end" --repo="$REPO" --authors="$AUTHORS" > "$temp_file"
    fi
done

# Combine the results into one JSON object
echo "{"
first=true
for file in "$temp_dir"/*.json; do
    date=$(basename "$file" .json)
    if [ "$first" = true ]; then
        first=false
    else
        echo ","
    fi
    echo "\"$date\": $(cat "$file")"
done
echo "}"
